/home/sam/github/data-fastapi
├── api
│   ├── config
│   │   ├── __init__.py
│   │   ├── logger_config.py
│   │   └── settings.py
│   ├── database
│   │   ├── connection.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── main.py
│   ├── models
│   │   ├── docs_pdf.py
│   │   └── user.py
│   └── routes
│       ├── __init__.py
│       ├── pdf_downloaded.py
│       └── users.py
├── code_report.py
├── custom_tree_and_files_corrected.txt
├── .env
├── .env.template
├── .gitignore
├── LICENSE
├── logs
│   ├── esg_spider_2024-01-09_16-48-16_693243.log
│   ├── esg_spider_2024-01-09_18-11-52_035169.log
│   ├── esg_spider_2024-01-09_18-13-04_357653.log
│   ├── esg_spider_2024-01-09_18-13-30_774048.log
│   ├── esg_spider_2024-01-09_18-16-48_130816.log
│   ├── esg_spider_2024-01-09_18-45-54_293038.log
│   ├── esg_spider_2024-01-09_18-51-07_955178.log
│   ├── esg_spider_2024-01-09_18-51-51_606993.log
│   ├── esg_spider_2024-01-09_18-51-59_641442.log
│   ├── esg_spider_2024-01-09_18-52-26_948306.log
│   ├── esg_spider_2024-01-09_18-54-31_395396.log
│   ├── esg_spider_2024-01-09_18-54-36_273356.log
│   ├── esg_spider_2024-01-09_18-56-07_865700.log
│   ├── esg_spider_2024-01-09_18-56-18_150400.log
│   ├── esg_spider_2024-01-09_18-57-04_728457.log
│   ├── esg_spider_2024-01-09_18-57-15_560143.log
│   ├── esg_spider_2024-01-09_18-57-22_161624.log
│   ├── esg_spider_2024-01-09_18-58-44_156825.log
│   ├── esg_spider_2024-01-09_18-58-50_019638.log
│   ├── esg_spider_2024-01-09_18-59-22_737409.log
│   ├── esg_spider_2024-01-09_19-00-34_139328.log
│   ├── esg_spider_2024-01-09_19-02-40_972514.log
│   ├── esg_spider_2024-01-09_19-02-45_677772.log
│   ├── esg_spider_2024-01-09_19-02-57_951438.log
│   ├── esg_spider_2024-01-09_19-04-37_337167.log
│   ├── esg_spider_2024-01-09_19-04-40_916752.log
│   ├── esg_spider_2024-01-09_19-08-17_357403.log
│   ├── esg_spider_2024-01-09_19-37-56_913244.log
│   ├── esg_spider_2024-01-09_19-38-56_582554.log
│   ├── esg_spider_2024-01-09_19-41-52_444704.log
│   ├── esg_spider_2024-01-09_19-58-01_962208.log
│   ├── esg_spider_2024-01-09_19-59-26_922606.log
│   ├── esg_spider_2024-01-09_20-00-01_017456.log
│   ├── esg_spider_2024-01-09_20-01-10_914355.log
│   ├── esg_spider_2024-01-09_20-01-44_052137.log
│   ├── esg_spider_2024-01-09_20-03-36_376699.log
│   ├── esg_spider_2024-01-09_20-06-10_615812.log
│   ├── esg_spider_2024-01-09_20-08-07_699583.log
│   ├── esg_spider_2024-01-09_20-08-59_985006.log
│   ├── esg_spider_2024-01-09_20-16-43_909620.log
│   ├── esg_spider_2024-01-09_20-26-06_757436.log
│   ├── esg_spider_2024-01-09_20-26-42_179388.log
│   ├── esg_spider_2024-01-09_20-40-56_108940.log
│   ├── esg_spider_2024-01-09_20-41-48_912934.log
│   ├── esg_spider_2024-01-09_20-46-49_247704.log
│   ├── esg_spider_2024-01-09_20-49-44_996025.log
│   ├── esg_spider_2024-01-09_20-53-35_407252.log
│   ├── esg_spider_2024-01-09_20-54-18_360731.log
│   └── esg_spider_2024-01-09_20-54-53_637685.log
├── README.md
├── requirements.txt
└── tests

8 directories, 69 files


=== Content of /home/sam/github/data-fastapi/code_report.py ===

Code present but not reported for space reasons

=== Content of /home/sam/github/data-fastapi/README.md ===

# data-FastAPI

## Overview

This repository contains the foundational code for a FastAPI application that connects to a SQL database using SQLModel. The goal is to deploy this API on Google Cloud Platform (GCP) and utilize Cloud SQL as the database service.

## Getting Started

### Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/your-repo-name.git
   ```

2. Navigate to the project directory:

   ```bash
   cd your-repo-name
   ```

3. Install required dependencies:

   ```bash
   pip install -r requirements.txt
   ```

### Local Development

1. Start your local development server:

   ```bash
   uvicorn main:app --reload
   ```

2. Access the API at `http://localhost:8000`.

### Database Configuration

- Configure your local and Cloud SQL database credentials in the `.env` file.

## Contributing

Contributions to this project are welcome. Please fork the repository and submit a pull request for any enhancements.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.


=== Content of /home/sam/github/data-fastapi/api/main.py ===

from fastapi import FastAPI
from fastapi.responses import RedirectResponse
from api.database.connection import conn
from api.routes.pdf_downloaded import docs_router
from api.routes.users import user_router
from contextlib import asynccontextmanager
from api.config.logger_config import logger
import uvicorn


@asynccontextmanager
async def lifespan(app: FastAPI):
    conn()
    yield


app = FastAPI(lifespan=lifespan)

# Register routes
app.include_router(docs_router, prefix="/pdf_downloaded")
app.include_router(user_router, prefix="/user")


@app.get("/metrics")
def metrics():
    return {"message": "This is a dummy metrics endpoint."}


@app.get("/")
async def home():
    return RedirectResponse(url="/docs")


if __name__ == "__main__":
    uvicorn.run("main:api", host="0.0.0.0", port=8080, reload=True)


=== Content of /home/sam/github/data-fastapi/api/config/logger_config.py ===

from loguru import logger
import sys


def setup_logger():
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    )
    logger.add(
        "logs/esg_spider_{time}.log",
        rotation="1 day",
        retention="7 days",
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    )


setup_logger()


=== Content of /home/sam/github/data-fastapi/api/config/settings.py ===

from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    environment: str = "development"

    sqlalchemy_database_url_dev: str
    sqlalchemy_database_url_prod: str

    @property
    def sqlalchemy_database_url(self) -> str:
        return (
            self.sqlalchemy_database_url_dev
            if self.environment == "development"
            else self.sqlalchemy_database_url_prod
        )

    class Config:
        env_file = ".env"


settings = Settings()


=== Content of /home/sam/github/data-fastapi/api/routes/users.py ===

from fastapi import APIRouter, HTTPException, status, Depends
from sqlmodel import Session, select
from api.models.user import User
from api.database.connection import get_session
import uuid

user_router = APIRouter(tags=["User"])
users = {}


@user_router.post("/signup")
async def sign_new_user(data: User, session: Session = Depends(get_session)) -> dict:
    # Check if the user already exists in the database
    existing_user = session.exec(select(User).where(User.email == data.email)).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="User with supplied email already exists",
        )

    # Generate a unique token for the new user
    data.token = str(uuid.uuid4())

    # Add new user to the database
    session.add(data)
    session.commit()
    session.refresh(data)
    return {"message": "User successfully registered!"}


@user_router.post("/signin")
async def sign_user_in(
    email: str, password: str, session: Session = Depends(get_session)
) -> dict:
    user = session.exec(select(User).where(User.email == email)).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found",
        )
    if user.password != password:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect password",
        )
    return {"message": "User successfully signed in!", "token": user.token}


=== Content of /home/sam/github/data-fastapi/api/routes/pdf_downloaded.py ===

from fastapi import APIRouter, Depends, HTTPException, status, Security
from fastapi.security import APIKeyHeader
from sqlmodel import Session, select
from typing import List
from api.models.docs_pdf import PdfDownload
from api.models.user import User
from api.database.connection import get_session
from api.config.logger_config import logger

# Router setup for documents
docs_router = APIRouter(tags=["Docs"])

# Header for token authentication
api_key_header = APIKeyHeader(name="Token", auto_error=False)


# Dependency to get the current user based on the token
async def get_current_user(
    token: str = Security(api_key_header), session: Session = Depends(get_session)
):
    if token is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="No token provided"
        )

    user = session.exec(select(User).where(User.token == token)).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token"
        )

    return user


# Endpoint to retrieve all documents, accessible only with valid token
@docs_router.get("/", response_model=List[PdfDownload])
async def retrieve_all_records(
    user: User = Depends(get_current_user), session: Session = Depends(get_session)
) -> List[PdfDownload]:
    statement = select(PdfDownload)
    events = session.exec(statement).all()
    logger.info(f"Retrieved {len(events)} records from the database")
    return events


=== Content of /home/sam/github/data-fastapi/api/models/docs_pdf.py ===

from sqlmodel import SQLModel, Field
from datetime import datetime


class PdfDownload(SQLModel, table=True):
    id: int = Field(default=None, primary_key=True)
    url: str = Field(sa_column_kwargs={"unique": True})
    status: str
    notes: str
    download_path: str
    downloaded_at: datetime = Field(default_factory=datetime.utcnow)
    keywords_namefile: str


=== Content of /home/sam/github/data-fastapi/api/models/user.py ===

from sqlmodel import SQLModel, Field
import uuid


class User(SQLModel, table=True):
    id: int = Field(default=None, primary_key=True)
    email: str
    password: str
    token: str = Field(default_factory=lambda: str(uuid.uuid4()))

    class Config:
        schema_extra = {
            "example": {
                "email": "test@gmail.com",
                "username": "strong!!!",
                "events": [],
            }
        }


=== Content of /home/sam/github/data-fastapi/api/database/connection.py ===

from sqlmodel import create_engine, SQLModel, Session
from ..config.settings import settings
from api.models.docs_pdf import PdfDownload
from api.models.user import User
from api.config.logger_config import logger

engine = create_engine(settings.sqlalchemy_database_url, echo=False)


def conn():
    SQLModel.metadata.create_all(engine)


def get_session():
    with Session(engine) as session:
        yield session


if __name__ == "__main__":
    conn()
