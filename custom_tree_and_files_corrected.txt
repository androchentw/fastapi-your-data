/home/sam/github/data-fastapi
├── api
│   ├── config
│   │   ├── __init__.py
│   │   ├── logger_config.py
│   │   └── settings.py
│   ├── database
│   │   ├── connection.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── main.py
│   ├── models
│   │   ├── documents.py
│   │   └── user.py
│   └── routes
│       ├── documents.py
│       ├── __init__.py
│       └── users.py
├── code_report.py
├── custom_tree_and_files_corrected.txt
├── .env
├── .env.template
├── .gitignore
├── LICENSE
├── logs
│   ├── esg_spider_2024-01-09_16-48-16_693243.log
│   ├── esg_spider_2024-01-09_18-11-52_035169.log
│   ├── esg_spider_2024-01-09_18-13-04_357653.log
│   ├── esg_spider_2024-01-09_18-13-30_774048.log
│   ├── esg_spider_2024-01-09_18-16-48_130816.log
│   ├── esg_spider_2024-01-09_18-45-54_293038.log
│   ├── esg_spider_2024-01-09_18-51-07_955178.log
│   ├── esg_spider_2024-01-09_18-51-51_606993.log
│   ├── esg_spider_2024-01-09_18-51-59_641442.log
│   ├── esg_spider_2024-01-09_18-52-26_948306.log
│   ├── esg_spider_2024-01-09_18-54-31_395396.log
│   ├── esg_spider_2024-01-09_18-54-36_273356.log
│   ├── esg_spider_2024-01-09_18-56-07_865700.log
│   ├── esg_spider_2024-01-09_18-56-18_150400.log
│   ├── esg_spider_2024-01-09_18-57-04_728457.log
│   ├── esg_spider_2024-01-09_18-57-15_560143.log
│   ├── esg_spider_2024-01-09_18-57-22_161624.log
│   ├── esg_spider_2024-01-09_18-58-44_156825.log
│   ├── esg_spider_2024-01-09_18-58-50_019638.log
│   ├── esg_spider_2024-01-09_18-59-22_737409.log
│   ├── esg_spider_2024-01-09_19-00-34_139328.log
│   ├── esg_spider_2024-01-09_19-02-40_972514.log
│   ├── esg_spider_2024-01-09_19-02-45_677772.log
│   ├── esg_spider_2024-01-09_19-02-57_951438.log
│   ├── esg_spider_2024-01-09_19-04-37_337167.log
│   ├── esg_spider_2024-01-09_19-04-40_916752.log
│   ├── esg_spider_2024-01-09_19-08-17_357403.log
│   ├── esg_spider_2024-01-09_19-37-56_913244.log
│   ├── esg_spider_2024-01-09_19-38-56_582554.log
│   ├── esg_spider_2024-01-09_19-41-52_444704.log
│   ├── esg_spider_2024-01-09_19-58-01_962208.log
│   ├── esg_spider_2024-01-09_19-59-26_922606.log
│   ├── esg_spider_2024-01-09_20-00-01_017456.log
│   ├── esg_spider_2024-01-09_20-01-10_914355.log
│   ├── esg_spider_2024-01-09_20-01-44_052137.log
│   ├── esg_spider_2024-01-09_20-03-36_376699.log
│   ├── esg_spider_2024-01-09_20-06-10_615812.log
│   ├── esg_spider_2024-01-09_20-08-07_699583.log
│   ├── esg_spider_2024-01-09_20-08-59_985006.log
│   ├── esg_spider_2024-01-09_20-16-43_909620.log
│   ├── esg_spider_2024-01-09_20-26-06_757436.log
│   ├── esg_spider_2024-01-09_20-26-42_179388.log
│   ├── esg_spider_2024-01-09_20-40-56_108940.log
│   ├── esg_spider_2024-01-09_20-41-48_912934.log
│   ├── esg_spider_2024-01-09_20-46-49_247704.log
│   ├── esg_spider_2024-01-09_20-49-44_996025.log
│   ├── esg_spider_2024-01-09_20-53-35_407252.log
│   ├── esg_spider_2024-01-09_20-54-18_360731.log
│   ├── esg_spider_2024-01-09_20-54-53_637685.log
│   ├── esg_spider_2024-01-09_20-59-38_057029.log
│   ├── esg_spider_2024-01-09_21-13-59_629168.log
│   ├── esg_spider_2024-01-09_21-14-41_580047.log
│   ├── esg_spider_2024-01-09_23-00-52_536701.log
│   ├── esg_spider_2024-01-09_23-01-11_429024.log
│   ├── esg_spider_2024-01-09_23-10-46_392724.log
│   ├── esg_spider_2024-01-09_23-13-11_966738.log
│   ├── esg_spider_2024-01-09_23-15-15_880385.log
│   ├── esg_spider_2024-01-09_23-17-24_100778.log
│   ├── esg_spider_2024-01-09_23-18-53_232811.log
│   ├── esg_spider_2024-01-09_23-20-49_749928.log
│   ├── esg_spider_2024-01-09_23-25-23_148722.log
│   ├── esg_spider_2024-01-09_23-29-21_152170.log
│   ├── esg_spider_2024-01-09_23-31-53_785688.log
│   ├── esg_spider_2024-01-09_23-33-13_366983.log
│   └── esg_spider_2024-01-09_23-35-58_555867.log
├── README.md
├── requirements.txt
└── tests

8 directories, 85 files


=== Content of /home/sam/github/data-fastapi/code_report.py ===

Code present but not reported for space reasons

=== Content of /home/sam/github/data-fastapi/README.md ===

# data-FastAPI

## Overview

This repository contains the foundational code for a FastAPI application that connects to a SQL database using SQLModel. The goal is to deploy this API on Google Cloud Platform (GCP) and utilize Cloud SQL as the database service.

## Getting Started

### Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/your-repo-name.git
   ```

2. Navigate to the project directory:

   ```bash
   cd your-repo-name
   ```

3. Install required dependencies:

   ```bash
   pip install -r requirements.txt
   ```

### Local Development

1. Start your local development server:

   ```bash
   uvicorn main:app --reload
   ```

2. Access the API at `http://localhost:8000`.

### Database Configuration

- Configure your local and Cloud SQL database credentials in the `.env` file.

## Contributing

Contributions to this project are welcome. Please fork the repository and submit a pull request for any enhancements.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.


=== Content of /home/sam/github/data-fastapi/api/main.py ===

from fastapi import FastAPI
from fastapi.responses import RedirectResponse
from api.database.connection import init_db
from api.routes.documents import docs_router
from api.routes.users import user_router
from contextlib import asynccontextmanager
from api.config.logger_config import logger
import uvicorn


@asynccontextmanager
async def lifespan(app: FastAPI):
    init_db()
    yield


app = FastAPI(lifespan=lifespan)

# Register routes
app.include_router(docs_router, prefix="/documents")
app.include_router(user_router, prefix="/user")


@app.get("/metrics")
def metrics():
    return {"message": "This is a dummy metrics endpoint."}


@app.get("/")
async def home():
    return RedirectResponse(url="/docs")


if __name__ == "__main__":
    uvicorn.run("main:api", host="0.0.0.0", port=8080, reload=True)


=== Content of /home/sam/github/data-fastapi/api/config/logger_config.py ===

from loguru import logger
import sys


def setup_logger():
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    )
    logger.add(
        "logs/esg_spider_{time}.log",
        rotation="1 day",
        retention="7 days",
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    )


setup_logger()


=== Content of /home/sam/github/data-fastapi/api/config/settings.py ===

from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    environment: str = "development"

    sqlalchemy_database_url_dev: str
    sqlalchemy_database_url_prod: str

    @property
    def sqlalchemy_database_url(self) -> str:
        return (
            self.sqlalchemy_database_url_dev
            if self.environment == "development"
            else self.sqlalchemy_database_url_prod
        )

    class Config:
        env_file = ".env"


settings = Settings()


=== Content of /home/sam/github/data-fastapi/api/routes/users.py ===

from fastapi import APIRouter, HTTPException, Depends, status
from sqlalchemy.orm import Session
from sqlalchemy import select
from api.models.user import User, UserCreate, UserResponse
from api.database.connection import SessionLocal
import uuid

user_router = APIRouter(tags=["User"])


def get_db():
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()


@user_router.post("/signup", response_model=UserResponse)
async def sign_new_user(user_data: UserCreate, db: Session = Depends(get_db)):
    with db as session:
        existing_user = session.execute(
            select(User).where(User.email == user_data.email)
        ).scalar()
        if existing_user:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="User with supplied email already exists",
            )

        new_user = User(
            email=user_data.email, password=user_data.password, token=str(uuid.uuid4())
        )
        session.add(new_user)
        session.commit()
        session.refresh(new_user)

    return UserResponse(email=new_user.email, token=new_user.token)


@user_router.post("/signin", response_model=UserResponse)
async def sign_user_in(
    email: str, password: str, db: Session = Depends(get_db)
) -> UserResponse:
    user = db.execute(select(User).where(User.email == email)).scalar()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="User not found"
        )
    if user.password != password:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect password"
        )
    return UserResponse(email=user.email, token=user.token)


=== Content of /home/sam/github/data-fastapi/api/routes/documents.py ===

from fastapi import APIRouter, Depends, HTTPException, status, Security
from sqlalchemy.orm import Session
from sqlalchemy import select
from api.models.documents import Documents, DocumentsResponse
from api.models.user import User
from api.database.connection import SessionLocal
from fastapi.security import APIKeyHeader
from typing import List

docs_router = APIRouter(tags=["Docs"])
api_key_header = APIKeyHeader(name="Token", auto_error=False)


def get_db():
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()


async def get_current_user(
    token: str = Security(api_key_header), db: Session = Depends(get_db)
):
    user = db.query(User).filter(User.token == token).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token"
        )
    return user


@docs_router.get("/", response_model=List[DocumentsResponse])
async def retrieve_all_records(
    user: User = Depends(get_current_user), db: Session = Depends(get_db)
) -> List[DocumentsResponse]:
    records = db.query(Documents).all()
    return records


=== Content of /home/sam/github/data-fastapi/api/models/user.py ===

from sqlalchemy import Column, Integer, String
from api.database.connection import Base
from pydantic import BaseModel, EmailStr
import uuid


# SQLAlchemy model
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    password = Column(String)
    token = Column(String, default=lambda: str(uuid.uuid4()))


# Pydantic model
class UserCreate(BaseModel):
    email: EmailStr
    password: str


class UserResponse(BaseModel):
    email: EmailStr
    token: str


=== Content of /home/sam/github/data-fastapi/api/models/documents.py ===

from sqlalchemy import Column, Integer, String, DateTime
from api.database.connection import Base
from pydantic import BaseModel
from datetime import datetime
from typing import Optional


# SQLAlchemy ORM model
class Documents(Base):
    __tablename__ = "documents"

    id = Column(Integer, primary_key=True, index=True)
    url = Column(String, unique=True)
    status = Column(String)
    notes = Column(String)
    download_path = Column(String)
    downloaded_at = Column(DateTime, default=datetime.utcnow)
    keywords_namefile = Column(String)


# Pydantic model for request/response validation


class DocumentsResponse(BaseModel):
    id: int
    url: str
    status: str
    notes: Optional[str]  # Allow None values
    download_path: str
    downloaded_at: datetime
    keywords_namefile: str


=== Content of /home/sam/github/data-fastapi/api/database/connection.py ===

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from contextlib import contextmanager
from api.config.settings import settings

# Define the base class for your models
Base = declarative_base()

# Create the SQLAlchemy engine
engine = create_engine(settings.sqlalchemy_database_url, echo=False)

# Create a configured "Session" class
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# Function to create all tables
def init_db():
    import api.models  # Import all the modules that define your SQLAlchemy models

    Base.metadata.create_all(bind=engine)


# Dependency to get a database session
@contextmanager
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
